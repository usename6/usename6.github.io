<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>usename6</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-21T08:53:51.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>usename6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯18春招机试</title>
    <link href="http://yoursite.com/2020/03/21/%E8%85%BE%E8%AE%AF18%E6%98%A5%E6%8B%9B%E6%9C%BA%E8%AF%95/"/>
    <id>http://yoursite.com/2020/03/21/腾讯18春招机试/</id>
    <published>2020-03-21T02:51:03.000Z</published>
    <updated>2020-03-21T08:53:51.036Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更blog，也好久没编程了，先做个简单慢慢学习。<br><a id="more"></a><br>A题<br>小Q定义了一种数列称为翻转数列:<br>给定整数n和m, 满足n能被2m整除。对于一串连续递增整数数列1, 2, 3, 4…, 每隔m个符号翻转一次, 最初符号为’-‘;。<br>例如n = 8, m = 2, 数列就是: -1, -2, +3, +4, -5, -6, +7, +8.<br>而n = 4, m = 1, 数列就是: -1, +2, -3, + 4.<br>小Q现在希望你能帮他算算前n项和为多少。</p><p>题解：稍微有点技巧的数学题？这个题有个条件很关键就是n能被2m整除，如果n不能被2m整除，那这个题要考虑的case还蛮多的。<br>考虑个最简单的模型：N是一个远大于2的偶数（本题中N一定是偶数），m=1<br>很容易想到：<br>$ \sum<em>{i=1}^N{i} - 2 * \sum</em>{j=1}^{N/2}{(1+(j-1)<em>2)} $<br>其实发现可以前面两个式子可以利用等差数列前N项和公式化简为：<br>$ \frac{N </em> (N+1)}{2} - \frac{N <em> N}{2} $<br>将m推广至小于N的任意数后其实也不难，就相当于后面的减数变成m个等差数列之和，每个等差数列的公差为2m<br>于是可以得到<br>$ \frac{N </em> (N+1)}{2} - (\frac{N <em> (M+1)}{2} + \frac{N </em> N}{2} - N * M) $<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    LL ans = n*(n+<span class="number">1</span>)/<span class="number">2</span> - ((n*(m+<span class="number">1</span>))/<span class="number">2</span> + (n*n/<span class="number">2</span> - n*m));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B题<br>牛牛和羊羊正在玩一个纸牌游戏。这个游戏一共有n张纸牌, 第i张纸牌上写着数字ai。<br>牛牛和羊羊轮流抽牌, 牛牛先抽, 每次抽牌他们可以从纸牌堆中任意选择一张抽出, 直到纸牌被抽完。<br>他们的得分等于他们抽到的纸牌数字总和。<br>现在假设牛牛和羊羊都采用最优策略, 请你计算出游戏结束后牛牛得分减去羊羊得分等于多少。</p><p>题解：水题<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    LL tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans + a[i] * tmp;</span><br><span class="line">        tmp = tmp * <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C题<br>小Q的父母要出差N天，走之前给小Q留下了M块巧克力。小Q决定每天吃的巧克力数量不少于前一天吃的一半，<br>但是他又不想在父母回来之前的某一天没有巧克力吃，请问他第一天最多能吃多少块巧克力</p><p>题解：这个题，最直观的想法就是暴力，然后在找到第一个满足条件就break，可是这样容易超时。因为这个第一个可能会很大。<br>于是我们仔细思考，发现这个题具有二分性质：即满足条件下的最大（小）解<br>于是就可以二分，check直接暴力check即可，复杂度为O(mlogn)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=ans+tp;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;n)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(tp&amp;<span class="number">1</span>)tp=tp/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tp=tp/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n,mid,ans;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//printf("[%d %d]\n",l,r);</span></span><br><span class="line">        <span class="comment">//printf("mid=%d\n",mid);</span></span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">            l=mid+<span class="number">1</span>,ans=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r&amp;&amp;check(l))ans=l;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>D题<br>小Q有X首长度为A的不同的歌和Y首长度为B的不同的歌，现在小Q想用这些歌组成一个总长度正好为K的歌单，<br>每首歌最多只能在歌单中出现一次，在不考虑歌单内歌曲的先后顺序的情况下，请问有多少种组成歌单的方法。</p><p>题解：简单组合数学，暴力即可，因为这里数据很小，不需要费马求逆元，直接用杨辉三角形即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL k;</span><br><span class="line">LL A,X,B,Y;</span><br><span class="line">LL C[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;A,&amp;X,&amp;B,&amp;Y);</span><br><span class="line">    LL sum=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=X;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            LL left=k-sum;</span><br><span class="line">            <span class="comment">//printf("left = %I64d\n",left);</span></span><br><span class="line">            <span class="keyword">if</span>(left%B==<span class="number">0</span>&amp;&amp;(left/B)&lt;=Y)ans=(ans+C[X][i]*C[Y][left/B]%mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        sum=sum+A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>F题，据说是个错题，而且就算题目意思改过来，好像就变成了给定区域左下角(0,0)和右上角(x,y)的矩形，<br>求在这个矩形中，离(x,y)最近的点。。。<br>想了一个很难写的暴力。。。，先将所有的第一维坐标存入set中，树状数组维护每个一维坐标下的第二维坐标，<br>然后先找到离x最近的$x_0$,然后二分查找树状数组找到第二维坐标，同样对第二维做同样的操作（丢set，查BIT），<br>比较最后得到两个结果，最后记得在两个树状数组删去对应的结果。对每个机器每次重复这样的操作即可。。。</p><p>不过按照原题做法，感觉不会做，有大佬说用2维KM求解二分图的带权匹配，没学过。。。，那天学习这种操作。</p><p>G题<br>待更。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有更blog，也好久没编程了，先做个简单慢慢学习。&lt;br&gt;
    
    </summary>
    
      <category term="机试" scheme="http://yoursite.com/categories/%E6%9C%BA%E8%AF%95/"/>
    
      <category term="C" scheme="http://yoursite.com/categories/%E6%9C%BA%E8%AF%95/C/"/>
    
    
      <category term="机试" scheme="http://yoursite.com/tags/%E6%9C%BA%E8%AF%95/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #525 div2</title>
    <link href="http://yoursite.com/2018/12/06/Codeforces-Round-525-div2/"/>
    <id>http://yoursite.com/2018/12/06/Codeforces-Round-525-div2/</id>
    <published>2018-12-06T12:31:52.000Z</published>
    <updated>2020-03-21T08:55:21.570Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://codeforces.com/contest/1088" target="_blank" rel="noopener">http://codeforces.com/contest/1088</a><br>codeforces 525 div2 题解 By usename6<br><a id="more"></a><br>A. Ehab and another construction problem<br><a href="http://codeforces.com/contest/1088/problem/A" target="_blank" rel="noopener">http://codeforces.com/contest/1088/problem/A</a><br>题意：给你一个x，问你在[1,x]范围是否存在两个数a,b，使得$a*b&gt;x$，且$ \frac{a}{b} &lt; x $<br>暴力枚举即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=x;b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=b;a&lt;=x;a+=b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a*b&gt;x&amp;&amp;a/b&lt;x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B. Ehab and subtraction<br><a href="http://codeforces.com/contest/1088/problem/B" target="_blank" rel="noopener">http://codeforces.com/contest/1088/problem/B</a><br>题意：给你一个长度为n的数组，你可以对它做K次操作，每次选出里面最小非0数，然后用这个数减去所有数，如果最后这个数组只剩0，那么输出0<br>排序，利用前缀累加的性质，乱搞一发就行。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    LL sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt==k)<span class="keyword">break</span>;</span><br><span class="line">        a[i]=max(a[i]-sum,<span class="number">0L</span>L);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        sum=sum+a[i];</span><br><span class="line">        <span class="keyword">int</span> id=upper_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,sum)-a;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(<span class="number">0L</span>L,a[id]-sum));</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(cnt==k)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt+<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C. Ehab and a 2-operation task<br><a href="http://codeforces.com/contest/1088/problem/C" target="_blank" rel="noopener">http://codeforces.com/contest/1088/problem/C</a><br>题意：给你长度为n的数组，然后你可以每次对这个元素进行两个操作，<br>1 x y,表示1~x这段都加y<br>2 x y,表示1~x这段都mody<br>然后你最多能操作n+1次，问你怎么做能把他变成一个递增序列</p><p>简单题，注意是对前缀操作，那我可以指定最后一次对全体数mod n,那么就简单了，那么我可以先对长度为n的做一次前缀操作，使得最后一个数mod n等于n-1，然后遗传对长度为n-1，操作，<br>直到第一个数为止，最后我在把所有的数mod n,这样的序列一定是递增的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        a[i]%=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> d=i<span class="number">-1</span>-a[i];</span><br><span class="line">        <span class="keyword">if</span>(d&lt;<span class="number">0</span>)d+=n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d %d\n"</span>,i,d);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            a[j]=(a[j]+d)%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2 %d %d\n"</span>,n,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>D. Ehab and another another xor problem<br><a href="http://codeforces.com/contest/1088/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/1088/problem/D</a><br>题意：交互题，这个题是这样，让你猜数字，你可以输入a,b，要你猜c,d，系统会返回给你一系列的值<br>a ^ c <em> b ^ d (</em>填写&gt; 、 &lt; 、=)<br>如果是a ^ c &gt; b ^ d 那么返回值为1<br>如果是a ^ c &lt; b ^ d 那么返回值为-1<br>相等返回值为0<br>还是一样，你最多只能进行62次操作，但c , d保证是小于$2^{30}$<br>这题看到62次询问，会想到的位操作，每次查询位，<br>假设你现在猜两个数字的最高位是什么？<br>1.如果这两个数字的最高位相同，那么你分别对最高位去异或1：<br>1）如果这两个数的都是1，那么第一个查询结果一定是-1<br>2）如果这两个数都是0，不需要做任何操作<br>2.如果两个数字都不相同，首先设定一个flag表示当前这两个数字大小比较<br>1）如果flag = 1,那么必然a是1<br>2）否则b是1</p><p>如何每次都使得查的是最高位，假设我已经猜出了a的29~i-1的位，那么我只需要那些这些数去异或原数，那么得到一定是i位是最高位，前面的位数都是0<br>flag的修改，因为flag表示当前除去29~i-1位，i~1位的c和d的比较，所以若第i位相同，我则不需要改变flag,如果第i位不相同，那么我就要改变flag,将c,d当前最高位去掉，使得他们最高位第i位不受任何影响，则异或用查询1的结果去更新即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"? %d %d\n"</span>,c,d);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,flag;</span><br><span class="line">    flag=ask(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f1=ask(a^(<span class="number">1</span>&lt;&lt;i),b);</span><br><span class="line">        <span class="keyword">int</span> f2=ask(a,b^(<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">        <span class="keyword">if</span>(f1==f2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>)a=a^(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">-1</span>)b=b^(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            flag=f1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f1==<span class="number">-1</span>)a=a^(<span class="number">1</span>&lt;&lt;i),b=b^(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"! %d %d\n"</span>,a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>E. Ehab and a component choosing problem<br><a href="http://codeforces.com/contest/1088/problem/E" target="_blank" rel="noopener">http://codeforces.com/contest/1088/problem/E</a><br>题意：给你一个n个节点的树，让你求选K个联通快，首先要最大化比例值，即联通块的权值和/k的值，其次最大化K的值<br>如果最大化比例，乍一看有点像01分数规划，但这里选的是联通快，而不是单独节点，这里我们放弃联通块的想法，考虑一种思路<br>没错，就是贪心。<br>设b是平均值<br>若选了k个联通块，权值分别为<br>$a<em>{1}，a</em>{2}，a<em>{3}，a</em>{4}…a<em>{k}$<br>那么$b=1/k*(a</em>{1}+a<em>{2}+…a</em>{k})$<br>即里面$a<em>{i}$可以用b替换<br>如果此时要增加平均值<br>则必须满足$a</em>{k+1}&gt;=b$，那么就是平均值才会增加，于是不如贪心的选最大值，然后找到和最大值相同的有多少个<br>然后这个题就变成如何找最大联通块的问题，可以用树形DP解决，首先思考两个个问题：<br>1.如何求解树上最大联通快<br>2.如何求解树上最大联通快的个数<br>3.如何求解不相交最大联通块个数<br>可以定义状态dp[i]表示以i为根节点的子树的最大联通块的值大小，注意i必须选<br>那么dp[i]=max(dp[i],dp[i]+dp[j]) 这里j是i的儿子节点，往上递归就行，这样就解决了如何求解最大联通块的问题。<br>统计也是如此，当某个子树的联通块的大小等于最大值mx，则令其为0，这样保证了不相交。然后统计一下等于mx的联通快的个数有多少个，这题就做完了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,next;&#125;;</span><br><span class="line"><span class="keyword">int</span> head[MAXN],tot,w[MAXN];</span><br><span class="line">Edge e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].v=v;</span><br><span class="line">    e[tot].next=head[u];</span><br><span class="line">    head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,cnt;</span><br><span class="line">LL mx;</span><br><span class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL sum=w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v!=pre)</span><br><span class="line">            sum=max(sum,sum+DP(v,u,flag));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)mx=max(mx,sum);</span><br><span class="line">    <span class="keyword">if</span>(sum==mx&amp;&amp;flag)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    mx=<span class="number">-1e9</span>;</span><br><span class="line">    DP(<span class="number">1</span>,<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">    DP(<span class="number">1</span>,<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d %d\n"</span>,cnt*mx,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://codeforces.com/contest/1088&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1088&lt;/a&gt;&lt;br&gt;codeforces 525 div2 题解 By usename6&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="codeforces" scheme="http://yoursite.com/categories/ACM/codeforces/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="codeforces" scheme="http://yoursite.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>图的裁剪算法&amp;&amp;曲线算法</title>
    <link href="http://yoursite.com/2018/11/07/%E5%9B%BE%E7%9A%84%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95%E5%92%8C%E6%9B%B2%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/07/图的裁剪算法和曲线算法/</id>
    <published>2018-11-07T08:22:39.000Z</published>
    <updated>2018-11-07T08:30:56.739Z</updated>
    
    <content type="html"><![CDATA[<p>裁剪算法，首先先状压下线段和边界的状态，然后根据斜截式暴力判断一下就好了，没什么难度，单纯模拟暴力，图形学马上就考试，毛线不懂怎么办啊，还没修界面，还没补青岛，还没搞数据库实验，数模还没看（队友会不会打我。。。）<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"graphics.h"</span><span class="comment">// 引用所需要的图形库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOP 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOTTOM 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> XL=<span class="number">100</span>,XR=<span class="number">300</span>,YB=<span class="number">100</span>,YT=<span class="number">300</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(y&lt;YB)code=code|BOTTOM;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;YT)code=code|TOP;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;XL)code=code|LEFT;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;XR)code=code|RIGHT;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayLine</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> color)</span>             <span class="comment">//中点划线</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = x1, y = y1;</span><br><span class="line"><span class="keyword">int</span> a = y1 - y2, b = x2 - x1;</span><br><span class="line"><span class="keyword">int</span> cx = (b &gt;= <span class="number">0</span> ? <span class="number">1</span> : (b = -b, <span class="number">-1</span>));</span><br><span class="line"><span class="keyword">int</span> cy = (a &lt;= <span class="number">0</span> ? <span class="number">1</span> : (a = -a, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">putpixel(x, y, color);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d, d1, d2;</span><br><span class="line"><span class="keyword">if</span> (-a &lt;= b)<span class="comment">// 斜率绝对值 &lt;= 1</span></span><br><span class="line">&#123;</span><br><span class="line">d = <span class="number">2</span> * a + b;</span><br><span class="line">d1 = <span class="number">2</span> * a;</span><br><span class="line">d2 = <span class="number">2</span> * (a + b);</span><br><span class="line"><span class="keyword">while</span>(x != x2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d &lt; <span class="number">0</span>)</span><br><span class="line">y += cy, d += d2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">d += d1;</span><br><span class="line">x += cx;</span><br><span class="line">putpixel(x, y, color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// 斜率绝对值 &gt; 1</span></span><br><span class="line">&#123;</span><br><span class="line">d = <span class="number">2</span> * b + a;</span><br><span class="line">d1 = <span class="number">2</span> * b;</span><br><span class="line">d2 = <span class="number">2</span> * (a + b);</span><br><span class="line"><span class="keyword">while</span>(y != y2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d &lt; <span class="number">0</span>)</span><br><span class="line">d += d1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x += cx, d += d2;</span><br><span class="line">y += cy;</span><br><span class="line">putpixel(x, y, color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; solve(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//circle(300,200,100);</span></span><br><span class="line">    <span class="keyword">int</span> x=x1,y=y1;</span><br><span class="line">    <span class="keyword">int</span> code=encode(x,y);</span><br><span class="line">    <span class="keyword">while</span>(code)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(code&amp;TOP)</span><br><span class="line">        &#123;</span><br><span class="line">            y=YT;</span><br><span class="line">            x=(x1-x2)*(y-y1)/(y1-y2)+x1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(code&amp;BOTTOM)</span><br><span class="line">        &#123;</span><br><span class="line">            y=YB;</span><br><span class="line">            x=(x1-x2)*(y-y1)/(y1-y2)+x1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(code&amp;LEFT)</span><br><span class="line">        &#123;</span><br><span class="line">            x=XL;</span><br><span class="line">            y=(y1-y2)*(x-x1)/(x1-x2)+y1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(code&amp;RIGHT)</span><br><span class="line">        &#123;</span><br><span class="line">            x=XR;</span><br><span class="line">            y=(y1-y2)*(x-x1)/(x1-x2)+y1;</span><br><span class="line">        &#125;</span><br><span class="line">        code=encode(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//circle(300,200,50);</span></span><br><span class="line">    <span class="keyword">return</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cur_line</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; s=solve(x1,y1,x2,y2);</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e=solve(x2,y2,x1,y1);</span><br><span class="line"></span><br><span class="line">    DisplayLine(s.x,s.y,e.x,e.y,GREEN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    initgraph(<span class="number">600</span>, <span class="number">600</span>);<span class="comment">//初始化，显示一个窗口，这里和BGI略有区别</span></span><br><span class="line">    setcaption(<span class="string">"裁剪算法"</span>);<span class="comment">//设置窗口标题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DisplayLine(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,RED);</span><br><span class="line">    DisplayLine(<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>,RED);</span><br><span class="line">    DisplayLine(<span class="number">300</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,RED);</span><br><span class="line">    DisplayLine(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">100</span>,RED);</span><br><span class="line"></span><br><span class="line">    DisplayLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>,BLUE);</span><br><span class="line">    cur_line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    getch();<span class="comment">//暂停一下等待用户按键</span></span><br><span class="line">    closegraph();<span class="comment">//关闭图形界面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;裁剪算法，首先先状压下线段和边界的状态，然后根据斜截式暴力判断一下就好了，没什么难度，单纯模拟暴力，图形学马上就考试，毛线不懂怎么办啊，还没修界面，还没补青岛，还没搞数据库实验，数模还没看（队友会不会打我。。。）&lt;br&gt;
    
    </summary>
    
      <category term="图形学，裁剪算法" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6%EF%BC%8C%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/"/>
    
      <category term="曲线" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6%EF%BC%8C%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/%E6%9B%B2%E7%BA%BF/"/>
    
    
      <category term="图形学" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="裁剪算法" scheme="http://yoursite.com/tags/%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/"/>
    
      <category term="曲线" scheme="http://yoursite.com/tags/%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>图形的填充算法</title>
    <link href="http://yoursite.com/2018/11/06/%E5%9B%BE%E5%BD%A2%E7%9A%84%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/06/图形的填充算法/</id>
    <published>2018-11-06T15:19:49.000Z</published>
    <updated>2018-11-07T08:39:29.597Z</updated>
    
    <content type="html"><![CDATA[<p>填充算法一共有三种：一种是扫描线算法，扫描线算法挺简单的，如果取y轴平行线做扫描线，把交点的x坐标丢进y扫描线就行，用几个vector维护，然后有几个条件：扫描在当前点之前到奇数个点，那就不在凸包里面，如果有偶数个点，则反之，然后这其中如果有交点是顶点则分类讨论，如果多边形上连接该点的两条边在扫描线同侧，则加2，否则加1，然后还是应用之前的条件看是否在凸包内部即可<br><a id="more"></a><br>边填充就是取反，从交点开始扫，然后每次对右边取反就完事<br>种子填充更简单，就看有没有打到边界，dfs就行，只要图形不是很大，都不会爆栈吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"graphics.h"</span><span class="comment">// 引用所需要的图形库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> used[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> mark[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> a,<span class="keyword">int</span> b):x(a),y(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Point &amp;tp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==tp.x)<span class="keyword">return</span> y&lt;tp.y;</span><br><span class="line">        <span class="keyword">return</span> x&lt;tp.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; G;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Line[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; st[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">501</span>+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BreLine</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> dx,dy;</span><br><span class="line"><span class="keyword">int</span> s1,s2;  <span class="comment">//标志点,记录x1与x2、y1与y2的位置关系</span></span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> tag;  <span class="comment">//记录斜率情况</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    x=x1;</span><br><span class="line">    y=y1;</span><br><span class="line">    dx=<span class="built_in">abs</span>(x1-x2);</span><br><span class="line">    dy=<span class="built_in">abs</span>(y1-y2);</span><br><span class="line">    <span class="keyword">if</span>(x2&gt;x1)</span><br><span class="line">        s1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s1=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y2&gt;y1)</span><br><span class="line">        s2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dy&gt;dx)</span><br><span class="line">    &#123;</span><br><span class="line">        t=dx;</span><br><span class="line">        dx=dy;</span><br><span class="line">        dy=t;</span><br><span class="line">        tag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tag=<span class="number">0</span>;</span><br><span class="line">    e=<span class="number">2</span>*dy-dx;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=dx;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        putpixel(x,y,RED);</span><br><span class="line">        used[x][y]=<span class="number">1</span>;</span><br><span class="line">        Line[y].push_back(x);</span><br><span class="line">        G.push_back(Point(x,y));</span><br><span class="line">        <span class="keyword">if</span>(e&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">if</span>(tag==<span class="number">0</span>)</span><br><span class="line">            y=y+s2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x=x+s1;</span><br><span class="line">            e=e<span class="number">-2</span>*dx;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag==<span class="number">0</span>)</span><br><span class="line">            x=x+s1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y=y+s2;</span><br><span class="line">        e=e+<span class="number">2</span>*dy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Line_paint</span><span class="params">()</span>                           <span class="comment">//边填充算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(mark,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mark));</span><br><span class="line">    sort(G.begin(),G.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Point tp=G[i];</span><br><span class="line">        <span class="keyword">int</span> y=tp.y;</span><br><span class="line">        <span class="keyword">if</span>(used[tp.x][tp.y]==<span class="number">2</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=tp.x;x&lt;=<span class="number">500</span>;x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mark[x][y]==<span class="number">-1</span>)mark[x][y]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> mark[x][y]=!mark[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">500</span>;x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;=<span class="number">500</span>;y++)</span><br><span class="line">            <span class="keyword">if</span>(mark[x][y]==<span class="number">1</span>)putpixel(x,y,RED);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itt=lower_bound(Line[y].begin(),Line[y].end(),x);</span><br><span class="line">    <span class="keyword">if</span>(Line[y].size()==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(itt==Line[y].begin()&amp;&amp;(*itt)&gt;x)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Line[y].begin();it!=Line[y].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> xx=(*it);</span><br><span class="line">        <span class="keyword">if</span>(xx&gt;x)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> yy=y;</span><br><span class="line">        <span class="keyword">if</span>(used[xx][yy]==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id=get_id(xx,yy);</span><br><span class="line">            <span class="keyword">if</span>(st[id][<span class="number">0</span>].y&lt;=yy&amp;&amp;st[id][<span class="number">1</span>].y&lt;=yy)</span><br><span class="line">                cnt+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st[id][<span class="number">0</span>].y&gt;=yy&amp;&amp;st[id][<span class="number">1</span>].y&gt;=yy)</span><br><span class="line">                cnt+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (cnt&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> xx=x+dx[i];</span><br><span class="line">        <span class="keyword">int</span> yy=y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(used[xx][yy]==<span class="number">1</span>||used[xx][yy]==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            putpixel(x,y,GREEN);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(vis[xx][yy])<span class="keyword">continue</span>;</span><br><span class="line">        putpixel(x,y,GREEN);</span><br><span class="line">        vis[xx][yy]=<span class="literal">true</span>;</span><br><span class="line">        dfs(xx,yy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gram</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">500</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">500</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                putpixel(i,j,GREEN);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ck(i,j))</span><br><span class="line">               putpixel(i,j,GREEN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    initgraph(<span class="number">500</span>, <span class="number">500</span>);<span class="comment">//初始化，显示一个窗口，这里和BGI略有区别</span></span><br><span class="line">    <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">500</span>;i++)Line[i].clear();</span><br><span class="line">    setcaption(<span class="string">"填充算法"</span>);<span class="comment">//设置窗口标题。</span></span><br><span class="line"></span><br><span class="line">    BreLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">400</span>);</span><br><span class="line">    BreLine(<span class="number">100</span>,<span class="number">400</span>,<span class="number">200</span>,<span class="number">0</span>);</span><br><span class="line">    BreLine(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">0</span>);</span><br><span class="line">    BreLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("yes\n");</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">500</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Line[i].size()==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        sort(Line[i].begin(),Line[i].end());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    st[get_id(<span class="number">0</span>,<span class="number">0</span>)].push_back(Point(<span class="number">100</span>,<span class="number">400</span>));</span><br><span class="line">    st[get_id(<span class="number">0</span>,<span class="number">0</span>)].push_back(Point(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    st[get_id(<span class="number">100</span>,<span class="number">400</span>)].push_back(Point(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    st[get_id(<span class="number">100</span>,<span class="number">400</span>)].push_back(Point(<span class="number">200</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    st[get_id(<span class="number">200</span>,<span class="number">0</span>)].push_back(Point(<span class="number">100</span>,<span class="number">400</span>));</span><br><span class="line">    st[get_id(<span class="number">200</span>,<span class="number">0</span>)].push_back(Point(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    st[get_id(<span class="number">100</span>,<span class="number">100</span>)].push_back(Point(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    st[get_id(<span class="number">100</span>,<span class="number">100</span>)].push_back(Point(<span class="number">200</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("yes\n");</span></span><br><span class="line"></span><br><span class="line">    used[<span class="number">0</span>][<span class="number">0</span>]=used[<span class="number">100</span>][<span class="number">400</span>]=used[<span class="number">100</span>][<span class="number">100</span>]=used[<span class="number">200</span>][<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//Line_paint();</span></span><br><span class="line">    <span class="comment">//dfs(100,200);</span></span><br><span class="line">    gram();</span><br><span class="line">    getch();<span class="comment">//暂停一下等待用户按键</span></span><br><span class="line">    closegraph();<span class="comment">//关闭图形界面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;填充算法一共有三种：一种是扫描线算法，扫描线算法挺简单的，如果取y轴平行线做扫描线，把交点的x坐标丢进y扫描线就行，用几个vector维护，然后有几个条件：扫描在当前点之前到奇数个点，那就不在凸包里面，如果有偶数个点，则反之，然后这其中如果有交点是顶点则分类讨论，如果多边形上连接该点的两条边在扫描线同侧，则加2，否则加1，然后还是应用之前的条件看是否在凸包内部即可&lt;br&gt;
    
    </summary>
    
      <category term="图形学，填充算法" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6%EF%BC%8C%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图形学" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="填充算法" scheme="http://yoursite.com/tags/%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>NAIPC-C.Greeting</title>
    <link href="http://yoursite.com/2018/11/06/NAIPC-C-Greeting/"/>
    <id>http://yoursite.com/2018/11/06/NAIPC-C-Greeting/</id>
    <published>2018-11-06T09:08:14.000Z</published>
    <updated>2018-11-07T08:31:50.249Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://codeforces.com/gym/101002" target="_blank" rel="noopener">http://codeforces.com/gym/101002</a><br>国庆做的NAIPC，usename6来补题<br><a id="more"></a><br>题目意思很简单，就是你给你N种信件，宽度为w，高度为h,数量为q，你可以自定义k种信封，让你求怎么制定信封，浪费的面积最小，信件不能旋转，不然可能还需要处理一下<br>数据范围很小，很容易往折半或者是状压，但是我觉得折半的话，得32这样吧，不然失去意义了，所以往状压DP想，若定义dp[i][s]表示i种信封可以覆盖状态为s的最小信件，预处理信件集合s的最小花费c[s],很明显我先去枚举s，再在s中枚举j，判断s需不需要拆分<br>转移方程为 $dp[i][s] = min(dp[i-1][s-j]+cost[j],dp[i][s])$ 其中j是s的子集，这样就做完了<br>这题有一个个坑点，结果会爆int,于是答案的上界应该处理为1e16左右<br>这题复杂度$O(3^n)$，还没证明出来。。。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN (1&lt;&lt;15)+100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">1e16</span>;</span><br><span class="line">LL dp[<span class="number">16</span>][MAXN],c[MAXN];</span><br><span class="line">LL w[<span class="number">16</span>],h[<span class="number">16</span>],q[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;w[i],&amp;h[i],&amp;q[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;(<span class="number">1</span>&lt;&lt;n);s++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL mxw,mxh,need;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        need=mxw=mxh=<span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt+=q[i];</span><br><span class="line">                mxw=max(mxw,w[i]);</span><br><span class="line">                mxh=max(mxh,h[i]);</span><br><span class="line">                need+=w[i]*h[i]*q[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c[s]=mxw*mxh*cnt-need;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++)</span><br><span class="line">            dp[i][j]=INF;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;                 <span class="comment">//初始化边界条件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)       <span class="comment">//枚举能用多少个</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n);s++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=s;j;j=(j<span class="number">-1</span>)&amp;s)</span><br><span class="line">                <span class="keyword">if</span>(dp[i<span class="number">-1</span>][s-j]&lt;INF)dp[i][s]=min(dp[i][s],dp[i<span class="number">-1</span>][s-j]+c[j]);</span><br><span class="line">    LL ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)ans=min(ans,dp[i][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://codeforces.com/gym/101002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/gym/101002&lt;/a&gt;&lt;br&gt;国庆做的NAIPC，usename6来补题&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/categories/ACM/DP/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/categories/ACM/DP/%E7%8A%B6%E5%8E%8BDP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>Red Black Tree</title>
    <link href="http://yoursite.com/2018/11/06/Red-Black-Tree/"/>
    <id>http://yoursite.com/2018/11/06/Red-Black-Tree/</id>
    <published>2018-11-06T04:04:47.000Z</published>
    <updated>2018-11-07T08:39:09.349Z</updated>
    
    <content type="html"><![CDATA[<p>ZOJ 4048<br>题目意思是给你一颗树，有n个节点，有m个红节点，当然根也是给红节点，给出q次查询，每次查询k个节点，你可以修改树上的一个黑节点为红色，求出所有修改中距离红节点的最大值的最小<br><a id="more"></a><br>最大值最小，一看就是二分，这题如果不带脑袋一想，应该就是求K个点的LCA，然后暴力二分check就行，check的方法很简单吧，就对于当前答案mid，找到所有大于mid，对这些节点求LCA，这样相当于是贪心吧，因为这些点距离最大值要最小，只能尽可能走LCA，于是就很简单了，如果这些点没有LCA，那肯定不行，如果有LCA，那就查看最大值是否小于mid就OK了。<br>据说倍增过不了，还没试，第二次写RMQ+LCA，卡的不行，没想到时间戳是两倍的空间，这个注意到了，然后上网查了一下题解，发现大家都很去掉一个log，于是去学习了下RMQ去掉log的姿势，然后做了排序剪枝二分check，当然是拉出来剪枝的，加了读入优化，硬是优化过去了，昨晚上一直卡，后来发现数组越界，然后发现答案会爆int，刷爆了ZOJ的测评，不知道是不是被ZJU给注意到了，早上起来改了改mid，然后交了一发，2010ms过吧，才发现ZOJ加时<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100015</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 200030</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,w,next;&#125;;</span><br><span class="line">Edge e[MAXM];</span><br><span class="line"><span class="keyword">int</span> head[MAXN],tot;</span><br><span class="line"><span class="keyword">int</span> first[MAXN*<span class="number">2</span>],R[<span class="number">2</span>*MAXN],p[MAXN*<span class="number">2</span>],cnt,dep[MAXN];</span><br><span class="line"><span class="keyword">int</span> node[MAXN],k,st[MAXN];</span><br><span class="line"><span class="keyword">bool</span> isred[MAXN];</span><br><span class="line"><span class="keyword">int</span> dp[MAXN*<span class="number">2</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mm[MAXN*<span class="number">2</span>];</span><br><span class="line">LL dis[MAXN],cost[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cost[a]&gt;cost[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span> (c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>) c=getchar();</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="string">'0'</span>&lt;=c &amp;&amp; c&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;   c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].v=v;</span><br><span class="line">    e[tot].w=w;</span><br><span class="line">    e[tot].next=head[u];</span><br><span class="line">    head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> depth,<span class="keyword">int</span> red,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    first[u]=++cnt;p[cnt]=u;R[cnt]=depth;</span><br><span class="line">    dep[u]=depth;</span><br><span class="line">    cost[u]=dis[u]-dis[red];                              <span class="comment">//每个节点到红色节点的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[v]=dis[u]+(LL)e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(isred[v])dfs(v,depth+<span class="number">1</span>,v,u);                   <span class="comment">//下传最近的红色点</span></span><br><span class="line">            <span class="keyword">else</span> dfs(v,depth+<span class="number">1</span>,red,u);</span><br><span class="line">            p[++cnt]=u;</span><br><span class="line">            R[cnt]=depth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mm[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        mm[i] = ((i&amp;(i<span class="number">-1</span>)) == <span class="number">0</span>) ? mm[i<span class="number">-1</span>]+<span class="number">1</span> : mm[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mm[n];j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=dp[i][j<span class="number">-1</span>],b=dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">            dp[i][j]=R[a]&lt;R[b]?a:b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=mm[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> a=dp[l][k],b=dp[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</span><br><span class="line">    <span class="keyword">return</span> R[a]&lt;R[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=first[u],y=first[v];</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)swap(x,y);</span><br><span class="line">    <span class="keyword">int</span> res=RMQ(x,y);</span><br><span class="line">    <span class="keyword">return</span> p[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(LL mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;                      <span class="comment">//top的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cost[node[i]]&gt;mid)</span><br><span class="line">            st[++top]=node[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(top&lt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;          <span class="comment">//小于或等于1个点改这个点即可</span></span><br><span class="line">    <span class="keyword">int</span> lca=st[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=top;i++)</span><br><span class="line">        lca=LCA(lca,st[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">        <span class="keyword">if</span>(dep[lca]&gt;dep[st[i]])<span class="keyword">return</span> <span class="literal">false</span>;             <span class="comment">//不存在LCA</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">        <span class="keyword">if</span>(dis[st[i]]-dis[lca]&gt;mid)<span class="keyword">return</span> <span class="literal">false</span>;       <span class="comment">//大于答案的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t=read();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read();m=read();q=read();</span><br><span class="line">        <span class="built_in">memset</span>(isred,<span class="literal">false</span>,<span class="keyword">sizeof</span>(isred));</span><br><span class="line">        cnt=tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            id=read();</span><br><span class="line">            isred[id]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;</span><br><span class="line">            u=read();v=read();w=read();</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        ST(<span class="number">2</span>*n<span class="number">-1</span>);              <span class="comment">//dfs序是二倍</span></span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            k=read();</span><br><span class="line">            LL mx=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">                node[i]=read();</span><br><span class="line">            sort(node+<span class="number">1</span>,node+<span class="number">1</span>+k,cmp);</span><br><span class="line">            mx=cost[node[<span class="number">1</span>]];</span><br><span class="line">            LL l=<span class="number">0</span>,r=mx;</span><br><span class="line">            LL ans;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">            &#123;</span><br><span class="line">                LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ck(mid))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans=mid;</span><br><span class="line">                    r=mid<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZOJ 4048&lt;br&gt;题目意思是给你一颗树，有n个节点，有m个红节点，当然根也是给红节点，给出q次查询，每次查询k个节点，你可以修改树上的一个黑节点为红色，求出所有修改中距离红节点的最大值的最小&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LCA" scheme="http://yoursite.com/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LCA/"/>
    
      <category term="二分" scheme="http://yoursite.com/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LCA/%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Maze Designer</title>
    <link href="http://yoursite.com/2018/11/04/Maze-Designer/"/>
    <id>http://yoursite.com/2018/11/04/Maze-Designer/</id>
    <published>2018-11-04T07:20:17.000Z</published>
    <updated>2018-11-07T08:32:01.831Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://nanti.jisuanke.com/t/31462" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/31462</a><br>题目给你nxm的方阵图，用最小花费建墙，相当于是迷宫，且每个方格互相可达，并且最短路径唯一，相当于是nxm的生成树，给出q次查询，求出任意这两个点的最短距离<br><a id="more"></a><br>首先去建一个最大生成树，因为生成树任意两个点均可达，最大是因为要让其花费最小，把所有花费大的墙拆掉，这样就留下一个唯一的路径，而且花费最小，且任意两点可达<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 250010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 500020</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,next,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge &amp;tp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w&gt;tp.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Edge e[MAXM];</span><br><span class="line">    <span class="keyword">int</span> fa[MAXN][<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dep[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dis[MAXN];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        height=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[tot].v=v;</span><br><span class="line">        e[tot].w=w;</span><br><span class="line">        e[tot].next=head[u];</span><br><span class="line">        head[u]=tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=height;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[u][i<span class="number">-1</span>]!=<span class="number">-1</span>)fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(fa[u][<span class="number">0</span>]!=v)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+e[i].w;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                fa[v][<span class="number">0</span>]=u;</span><br><span class="line">                dfs(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line">        <span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=height;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d)</span><br><span class="line">                u=fa[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> h=height;h&gt;=<span class="number">0</span>;h--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[u][h]!=fa[v][h])</span><br><span class="line">            &#123;</span><br><span class="line">                u=fa[u][h];</span><br><span class="line">                v=fa[v][h];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dis[u]+dis[v]<span class="number">-2</span>*dis[lca(u,v)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">LCA L;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Krusal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Edge e[MAXM];</span><br><span class="line">    <span class="keyword">int</span> f[MAXN];</span><br><span class="line">    <span class="keyword">int</span> tot;                        <span class="comment">//多少条边</span></span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)f[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[tot].u=u;                 <span class="comment">//记录起点</span></span><br><span class="line">        e[tot].v=v;</span><br><span class="line">        e[tot].w=w;</span><br><span class="line">        tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fid</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> f[u]==u?u:f[u]=fid(f[u]);&#125;    <span class="comment">//并查集</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">krusal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(e,e+tot);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> f1=fid(e[i].u);</span><br><span class="line">            <span class="keyword">int</span> f2=fid(e[i].v);</span><br><span class="line">            <span class="keyword">if</span>(f1!=f2)</span><br><span class="line">            &#123;</span><br><span class="line">                f[f1]=f2;</span><br><span class="line">                <span class="comment">//记录最大生成树的边</span></span><br><span class="line">                L.add(e[i].u,e[i].v,<span class="number">1</span>);</span><br><span class="line">                L.add(e[i].v,e[i].u,<span class="number">1</span>);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=N<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Krusal K;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        K.N=n*m;</span><br><span class="line">        K.init();</span><br><span class="line">        L.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> s1[<span class="number">10</span>],s2[<span class="number">10</span>];</span><br><span class="line">                <span class="keyword">int</span> w1,w2;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s%d%s%d"</span>,s1,&amp;w1,s2,&amp;w2);</span><br><span class="line">                <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">                    K.add((i<span class="number">-1</span>)*m+j,i*m+j,w1);</span><br><span class="line">                <span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">                    K.add((i<span class="number">-1</span>)*m+j,(i<span class="number">-1</span>)*m+j+<span class="number">1</span>,w2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        K.krusal();</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        L.dfs(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            <span class="keyword">int</span> u=(x1<span class="number">-1</span>)*m+y1;</span><br><span class="line">            <span class="keyword">int</span> v=(x2<span class="number">-1</span>)*m+y2;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,L.query(u,v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://nanti.jisuanke.com/t/31462&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nanti.jisuanke.com/t/31462&lt;/a&gt;&lt;br&gt;题目给你nxm的方阵图，用最小花费建墙，相当于是迷宫，且每个方格互相可达，并且最短路径唯一，相当于是nxm的生成树，给出q次查询，求出任意这两个点的最短距离&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LCA" scheme="http://yoursite.com/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LCA/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>Bresenham算法</title>
    <link href="http://yoursite.com/2018/10/29/Bresenham%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/29/Bresenham算法/</id>
    <published>2018-10-29T11:46:36.000Z</published>
    <updated>2018-11-07T08:35:56.910Z</updated>
    
    <content type="html"><![CDATA[<p>Bresenham算法是第三种基于扫描线的算法，第一种是DDA算法，非常简单，直接强制转化y（四舍五入）然后绘点，而中点画线法，通过将函数隐式化，通过不等式关系，查看点与直线的关系，选择最近的像素点<br><a id="more"></a><br>那么Bresenham算法又是怎么做的呢？<br>假设$dx = x2 - x1 $, $dy = y2 - y1$,那么直线方程可以表示为<br>$(\frac{dy}{dx})x + b = y$<br>取$k = \frac{dy}{dx}$<br>若假设点$p<em>{i}$坐标为$(x</em>{i},y_{i})$,则<br>分类对直线斜率进行分类讨论<br>k &gt; 0 时，若直线是按坐标序枚举，很容易发现相邻两个坐标之间的增量是正值<br>若$|dx| &gt; |dy|$<br>剩下的过程其实和中点画线差不多，详细过程改日再补<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,dx,dy,d,d1,d2,inc;</span><br><span class="line">    dx=x2-x1;</span><br><span class="line">    dy=y2-y1;</span><br><span class="line">    <span class="keyword">if</span>(dx*dy&gt;=<span class="number">0</span>)inc=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> inc=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(dx)&gt;<span class="built_in">abs</span>(dy))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dx&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(x1,x2);</span><br><span class="line">            <span class="built_in">std</span>::swap(y1,y2);</span><br><span class="line">            dx=-dx;dy=-dy;</span><br><span class="line">        &#125;</span><br><span class="line">        d=<span class="number">2</span>*dy-dx;</span><br><span class="line">        d1=<span class="number">2</span>*dy;</span><br><span class="line">        d2=<span class="number">2</span>*(dy-dx);</span><br><span class="line">        x=x1;</span><br><span class="line">        y=y1;</span><br><span class="line">        <span class="keyword">while</span>(x&lt;x2)</span><br><span class="line">        &#123;</span><br><span class="line">            glPointSize(<span class="number">5.0</span>);</span><br><span class="line">            glBegin(GL_POINTS);</span><br><span class="line">            glVertex2i(x,y);</span><br><span class="line">            glEnd();</span><br><span class="line">            x++;</span><br><span class="line">            <span class="keyword">if</span>(d&lt;<span class="number">0</span>)d+=d1;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                y+=inc;</span><br><span class="line">                d+=d2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dy&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(x1,x2);</span><br><span class="line">            <span class="built_in">std</span>::swap(y1,y2);</span><br><span class="line">            dx=-dx;dy=-dy;</span><br><span class="line">        &#125;</span><br><span class="line">        d=<span class="number">2</span>*dy-dx;</span><br><span class="line">        d1=<span class="number">2</span>*dy;</span><br><span class="line">        d2=<span class="number">2</span>*(dy-dx);</span><br><span class="line">        x=x1;</span><br><span class="line">        y=y1;</span><br><span class="line">        <span class="keyword">while</span>(y&lt;y2)</span><br><span class="line">        &#123;</span><br><span class="line">            glPointSize(<span class="number">5.0</span>);</span><br><span class="line">            glBegin(GL_POINTS);</span><br><span class="line">            glVertex2i(x,y);</span><br><span class="line">            glEnd();</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">if</span>(d&lt;<span class="number">0</span>)d+=d1;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                x+=inc;</span><br><span class="line">                d+=d2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glViewport(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    Bresenham(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">100</span>);</span><br><span class="line">    Bresenham(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">    Bresenham(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">    Bresenham(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    Bresenham(<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//printf("over\n");</span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc,argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE|GLUT_RED);</span><br><span class="line">    glutInitWindowSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">"MPLine"</span>);</span><br><span class="line">    glutDisplayFunc(display);               <span class="comment">//调用里面函数的绘图函数（当然是你定义）</span></span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, <span class="number">500.0</span>, <span class="number">0.0</span>, <span class="number">500.0</span>);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bresenham算法是第三种基于扫描线的算法，第一种是DDA算法，非常简单，直接强制转化y（四舍五入）然后绘点，而中点画线法，通过将函数隐式化，通过不等式关系，查看点与直线的关系，选择最近的像素点&lt;br&gt;
    
    </summary>
    
      <category term="图形学" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="Open GL" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/Open-GL/"/>
    
    
      <category term="图形学" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="Open GL" scheme="http://yoursite.com/tags/Open-GL/"/>
    
  </entry>
  
  <entry>
    <title>DP优化专题二</title>
    <link href="http://yoursite.com/2018/10/29/DP%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/10/29/DP优化专题二/</id>
    <published>2018-10-29T04:49:52.000Z</published>
    <updated>2018-11-07T08:36:38.799Z</updated>
    
    <content type="html"><![CDATA[<p>垃圾usename6又来更新DP专题了。。。<br><a id="more"></a><br>今天要讲的是DP的第二个专题优化，倍增优化，之前在专题一中，我们已经说过了，DP优化无非从时间，即DP转移入手，或是从空间入手。<br>下面我来看一道这样题目（来源HDU 2157）<br>给定一个有向图，问从A点恰好走k步（允许重复经过边）到达B点的方案数mod p的值<br>乍一看是图论，实际上可以从DP角度去考虑这个题，定义状态dp[u][k]表示走k步走到u这个节点的方案数是多少，很明显根据图的性质和加法原理，转移为dp[v][k]+=dp[u][k-1] （存在u—-&gt; v的 有向边）<br>但是若这个k很大的时候，难免就要进行很大计算，我们发现不管走多少步，只要你从k节点出发，转移是固定的，转移的方程也是固定的（！这个很重要）于是，我们可以采用倍增去加速一阶线性递推式，即矩阵快速幂去倍增优化转移<br>两个状态到两个状态之间转移应该是邻接矩阵，于是对邻接矩阵进行快速幂优化转移即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line">&#125;Martix;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000</span>;</span><br><span class="line">Martix unit;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">Martix <span class="keyword">operator</span>*(Martix a,Martix b)</span><br><span class="line">&#123;</span><br><span class="line">    Martix res;</span><br><span class="line">    <span class="built_in">memset</span>(res.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(res.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.a[i][j]=(res.a[i][j]+a.a[i][k]*b.a[k][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(unit.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(unit.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        unit.a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Martix <span class="title">qpow_mod</span><span class="params">(Martix a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Martix res=unit;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            res=res*a;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s,e,k,cnt,t,A,B;</span><br><span class="line">    Martix res,tmp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n&amp;&amp;!m)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(tmp.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp.a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s,&amp;e);</span><br><span class="line">            tmp.a[s][e]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//printf("%d %d\n",s,e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">while</span>(t--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;k);</span><br><span class="line">            init();</span><br><span class="line">            res=qpow_mod(tmp,k);</span><br><span class="line">            cnt=res.a[A][B];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一开始我一直错误的认为矩阵的倍增优化转移只能在一阶线性递推式解决，知道发现了这道题：<br>有n天，m件衣服，如果某一天穿了第i件衣服，第二天穿了第j件衣服，那么就会获得f[i][j]的权值。然后给你矩阵f，每件衣服可以穿无限多次，问第n天能获得的最大权值是多少。<br>同样的我们发现，若是定义状态dp[u][k]表示第k天穿了u这件服装，那么转移式子只需把上面的式子进行小小的改动：dp[v][k] = max(dp[u][k-1] + f[u][v])   (u—-&gt;v相连)<br>同样的不管k是多少，对于每个节点的u的转移是不变的，每次都会用到这个矩阵去转移，于是我们采用了模仿矩阵快速幂的方向，做倍增优化，其实是取max和+运算的结合律导致的，这个不做证明，需要用到离散数学的群论和代数系统的知识，有兴趣自行证明，于是导致我们可以先算后面在和前面合并<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL a[MAXN][MAXN];</span><br><span class="line">&#125;Martix;</span><br><span class="line">Martix unit;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">Martix <span class="keyword">operator</span>*(Martix a,Martix b)</span><br><span class="line">&#123;</span><br><span class="line">    Martix ans;</span><br><span class="line">    <span class="built_in">memset</span>(ans.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.a[i][j]=max(ans.a[i][j],a.a[i][k]+b.a[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(unit.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(unit.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            unit.a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Martix <span class="title">qpow_mod</span><span class="params">(Martix a,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Martix res;</span><br><span class="line">    <span class="built_in">memset</span>(res.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(res.a));</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*a;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">Martix tmp,ret;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;tmp.a[i][j]);</span><br><span class="line">        ret=qpow_mod(tmp,(LL)m<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//        for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            for(int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//                printf("%lld ",ret.a[i][j]);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            puts("");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                ans=max(ans,ret.a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述两个都是类似分层图的DP，因此没有后效性，可以自己思考一下，状态有二维，尽管图上有环也不会导致后效性</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;垃圾usename6又来更新DP专题了。。。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/categories/ACM/DP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>DP优化专题一</title>
    <link href="http://yoursite.com/2018/10/28/DP%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B8%80/"/>
    <id>http://yoursite.com/2018/10/28/DP优化专题一/</id>
    <published>2018-10-28T15:10:17.000Z</published>
    <updated>2018-11-07T08:37:14.209Z</updated>
    
    <content type="html"><![CDATA[<p>DP优化专题<br>虽然不是DP的选手，但是可见DP的重要性，DP这个东西高深的很，打算写一写关于DP的事情，usename6 DP 水平有限？dalao求轻喷<br><a id="more"></a><br>DP优化一 枚举优化<br>曾经在一次暑假集训的讲课中，选择了讲DP，本来就不是很懂DP这个东西，于是随便选了几个题讲讲，没想到就讲出了DP的其中一个优化，枚举优化，若不是雨神说，我可能都不知道这是什么。。。<br>枚举优化是什么？<br>DP的优化有两种方向，第一种是选择优化时间，第二种是优化空间，如果从时间的角度去考虑优化，那么就要从转移上考虑，如何优化转移，是优化时间重要的思想<br>首先思考这样一个问题：<br>给一个nxm的矩阵，要求你求出一个子矩阵，使得这个矩阵的和最大这个题的传统做法就是枚举起点(x1,y1)、终点(x2,y2)，然后套两重循环，复杂度O($n^6$)<br>一个优化就是加上二维前缀和，这样省去了两个循环，复杂度O($n^4$)<br>固定行的上下界，然后将一列压成一个元素，这题就变成了最大子段和的问题，DP即可O($n^3$)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL sum[maxn][maxn],a[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            sum[i][j]=sum[i<span class="number">-1</span>][j]+x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k]=sum[j][k]-sum[i<span class="number">-1</span>][k];</span><br><span class="line">                dp[k]=max(a[k],dp[k<span class="number">-1</span>]+a[k]);</span><br><span class="line">                mx=max(mx,dp[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是这个题还有一种优化，就是可以枚举优化掉这个东西转移<br>假设你换一种角度去思考这道题<br>我都把矩阵的上下界固定了，左右的界能不能固定，对应每个矩阵右端列，我能不能快速找到左端列，使得以该右端列结尾的最大连续子矩阵和<br>单调队列去优化转移，每次存该列的前缀子矩阵和（类似扫描线推进），然后在1~当前枚举右端列i-1中从单调队列快速提出来<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL sum[maxn][maxn],q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            sum[i][j]=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> qs,qe;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            qs=<span class="number">0</span>;qe=<span class="number">1</span>;</span><br><span class="line">            q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//printf("%d %d\n",i,j);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//printf("k = %d\n",k);</span></span><br><span class="line">                LL data=sum[j][k]-sum[i<span class="number">-1</span>][k];</span><br><span class="line">                <span class="comment">//printf("data = %I64d\n",data);</span></span><br><span class="line">                <span class="keyword">if</span>(qs&lt;qe)mx=max(mx,data-q[qs]);</span><br><span class="line">                <span class="keyword">while</span>(qs&lt;qe)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(data&gt;=q[qe<span class="number">-1</span>])<span class="keyword">break</span>;</span><br><span class="line">                    qe--;</span><br><span class="line">                &#125;</span><br><span class="line">                q[qe]=data;</span><br><span class="line">                qe++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>由于是前缀，于是可以做枚举优化？<br>由于每次转移需要都是1~i-1的前缀子矩阵和，于是只需要开个数mx维护1~i-1的最小值即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL sum[maxn][maxn],q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            sum[i][j]=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL mx=<span class="number">0</span>,mm;</span><br><span class="line">    <span class="keyword">int</span> qs,qe;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            mm=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                LL data=sum[j][k]-sum[i<span class="number">-1</span>][k];</span><br><span class="line">                <span class="keyword">if</span>(k!=<span class="number">1</span>)mx=max(mx,data-mm);</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">1</span>)mx=max(mx,data);</span><br><span class="line">                mm=min(mm,data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DP优化专题&lt;br&gt;虽然不是DP的选手，但是可见DP的重要性，DP这个东西高深的很，打算写一写关于DP的事情，usename6 DP 水平有限？dalao求轻喷&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/categories/ACM/DP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Wannafly挑战赛27</title>
    <link href="http://yoursite.com/2018/10/28/Wannafly%E6%8C%91%E6%88%98%E8%B5%9B27/"/>
    <id>http://yoursite.com/2018/10/28/Wannafly挑战赛27/</id>
    <published>2018-10-28T14:39:52.000Z</published>
    <updated>2018-11-07T08:40:06.685Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/acm/contest/215#question" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/215#question</a><br>A.灰魔法师<br><a id="more"></a><br>给出长度为n的序列a, 求有多少对数对 (i, j) (1 &lt;= i &lt; j &lt;= n) 满足 $a<em>{i} + a</em>{j}$ 为完全平方数。<br>因为这玩意$n&lt;=100000$，于是我去暴力打了一个表，发现这个完全平方数不是很多，直接二分check就行了，跟沈阳的G比起来差远了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tp=<span class="built_in">sqrt</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(tp*tp==i)</span><br><span class="line">            v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        cnt[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id=upper_bound(v.begin(),v.end(),a[i])-v.begin();</span><br><span class="line">        <span class="comment">//printf("yes\n");</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=id;j&lt;(<span class="keyword">int</span>)v.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=cnt[v[j]-a[i]];</span><br><span class="line">            <span class="keyword">if</span>(v[j]==<span class="number">2</span>*a[i])ans--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B.紫魔法师<br>给出一棵仙人掌(每条边最多被包含于一个环，无自环，无重边，保证连通)，要求用最少的颜色对其顶点染色，满足每条边两个端点的颜色不同，输出最小颜色数即可<br>签到题二，这个题，很明显发现答案的取值范围在1，2，3之间，为什么呢，因为题目保证每条边最多被包含一个环，也就是这个图好吧，就是类似联通快一个东西，<br>可以证明奇数环下，至少需要3个颜色，其余偶环和长度为2的颜色只需要2个颜色，然后特殊考虑其中一个边界，那就是都是单点的时候，这个时候一个颜色就行，偶环<br>就用二分图染色法搞一搞。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> color[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="comment">//printf("s=%d\n",s);</span></span><br><span class="line">    color[s]=<span class="number">1</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[u].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[u][i];</span><br><span class="line">            <span class="keyword">if</span>(color[v]!=<span class="number">-1</span>&amp;&amp;color[v]==color[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(color[v]==<span class="number">-1</span>)q.push(v);</span><br><span class="line">            color[v]=color[u]^<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(!m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(color,<span class="number">-1</span>,<span class="keyword">sizeof</span>(color));</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(color[i]==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(BFS(i))</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag?<span class="built_in">puts</span>(<span class="string">"3"</span>):<span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C.蓝魔法师</p><p>“你，你认错人了。我真的，真的不是食人魔。”—蓝魔法师</p><p>给出一棵树，求有多少种删边方案，使得删后的图每个连通块大小小于等于k，两种方案不同当且仅当存在一条边在一个方案中被删除，而在另一个方案中未被删除，答案对998244353取模<br>考试的时候，想出是树形dp，怎么合并啊，想了一个小时，想不出来，遂弃疗，好吧其实是再不复习图形学就GG了。<br>dp[u][num]表示根节点为u的子树下大小为num节点合并的方案数<br>首先去枚举儿子节点，然后去枚举每个儿子中的多少个节点和父亲合并后的方法数，很明显是个乘法原理，把所有的方案数加起来<br>这操作很秀吧，滚两个数组，c和dp，c表示合并当前子树的方案数，然后滚动一下，怎么老是滚动优化，真的是。。。，DP这么喜欢用滚动吗<br>然后注意考虑下DP边界，就是儿子选0个合并的时，需要计算子树v 1~k的方案数的和，因为不选的话,v也是一样1~k的选择权（选k以上肯定不符合题意）<br>于是这题就做完了，不得不说usename6 DP 真垃圾<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,next;&#125;;</span><br><span class="line"><span class="keyword">int</span> head[MAXN],num[MAXN],tot,n,k;</span><br><span class="line">LL dp[MAXN][MAXN],c[MAXN];</span><br><span class="line">Edge e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].v=v;</span><br><span class="line">    e[tot].next=head[u];</span><br><span class="line">    head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf("u=%d\n",u);</span></span><br><span class="line">    dp[u][<span class="number">1</span>]=<span class="number">1</span>;         <span class="comment">//初始化当u这个子树为1的方案数</span></span><br><span class="line">    num[u]=<span class="number">1</span>;          <span class="comment">//表示u的子树个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            <span class="comment">//printf("%d --- &gt; %d\n",u,v);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;=num[v];x++)      <span class="comment">//枚举v子树的大小，从0开始是因为他可不选</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=num[u];y++) <span class="comment">//枚举u子树的大小，从1开始是因为他必须选</span></span><br><span class="line">                &#123;</span><br><span class="line">                    c[x+y]+=dp[u][y]*dp[v][x]%mod;</span><br><span class="line">                    c[x+y]%=mod;</span><br><span class="line">                    <span class="comment">//printf("%d %lld\n",x+y,c[x+y]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[u]+=num[v];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=num[u];x++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[u][x]=c[x];</span><br><span class="line">                c[x]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(k,num[u]);i++)</span><br><span class="line">        dp[u][<span class="number">0</span>]=(dp[u][<span class="number">0</span>]+dp[u][i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>D.绿魔法师<br>听说是容斥？数论选手决定留坑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/acm/contest/215#question&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/215#question&lt;/a&gt;&lt;br&gt;A.灰魔法师&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Wannafly" scheme="http://yoursite.com/categories/ACM/Wannafly/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Wannafly" scheme="http://yoursite.com/tags/Wannafly/"/>
    
  </entry>
  
  <entry>
    <title>中点画线算法</title>
    <link href="http://yoursite.com/2018/10/28/%E4%B8%AD%E7%82%B9%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/28/中点画线算法/</id>
    <published>2018-10-28T14:06:07.000Z</published>
    <updated>2018-11-07T08:40:38.062Z</updated>
    
    <content type="html"><![CDATA[<p>图形学扫描线算法复习中，拯救图形学计划。。。<br><a id="more"></a><br>首先这个算法是有适用范围的：$0 &lt; k &lt; 1 $<br>首先将一般的直线方程转化为： $ F(x,y) = ax + by + c $<br>很明显我们发现<br>1.当$F(x,y) = 0$时，点(x,y)在直线上<br>2.当$F(x,y) &gt; 0$时，点(x,y)在直线的上方<br>3.当$F(x,y) &lt; 0$时，点(x,y)在直线的下方<br>若设当前像素点P点$(x<em>{p},y</em>{p})$，那么其中点M点$(x<em>{p} + 1,y</em>{p} + 0.5)$<br>定义 $d = F(M) = F(x<em>{p} + 1,y</em>{p} + 0.5) = a(x<em>{p} + 1) + b(y</em>{p} + 1) + c$<br>对d分类讨论有<br>若d大于0，即M点在直线上方，取$P<em>{1}$点<br>此时由$P</em>{1}$生成的F值（差值）为d1<br>$d1 = F(x<em>{p} + 2,y</em>{p} + 0.5) = a(x<em>{p} + 2) + b(y</em>{p} + 0.5) + c = d + a $<br>即 $x<em>{p+1} = x</em>{p} + 2$<br>   $y<em>{p+1} = y</em>{p} + 0.5$<br>   $d<em>{p+1} = d</em>{p} + a<br>若d小于0，即M点在直线下方，取$P<em>{2}点<br>同理 $ d2 = F{x</em>{p} + 2, y<em>{p} + 1.5} = a(x</em>{p} + 2) + b(y<em>{p} + 1.5) + c = d + a + b $<br>即 $x</em>{p+1} = x<em>{p} + 2$<br>   $y</em>{p+1} = y<em>{p} + 1.5$<br>   $d</em>{p+1} = d_{p} + a + b$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MP_Line</span><span class="params">(<span class="keyword">int</span> x0,<span class="keyword">int</span> y0,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,d1,d2,d,x,y;</span><br><span class="line">    a=y0-y1;</span><br><span class="line">    b=x1-x0;</span><br><span class="line">    d=a+a+b;</span><br><span class="line">    d1=a+a;</span><br><span class="line">    d2=a+a+b+b;</span><br><span class="line">    x=x0;</span><br><span class="line">    y=y0;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;x1)</span><br><span class="line">    &#123;</span><br><span class="line">        glPointSize(<span class="number">5.0</span>);</span><br><span class="line">        glBegin(GL_POINTS);</span><br><span class="line">        <span class="keyword">if</span>(d&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            glVertex2f(x,y);</span><br><span class="line">            glEnd();</span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">            d+=d2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            glVertex2f(x,y);</span><br><span class="line">            glEnd();</span><br><span class="line">            x++;</span><br><span class="line">            d+=d1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf("(%d,%d)\n",x,y);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glViewport(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    MP_Line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">100</span>);</span><br><span class="line">    MP_Line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">    MP_Line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">    MP_Line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">400</span>);</span><br><span class="line">    <span class="comment">//printf("over\n");</span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc,argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE|GLUT_RED);</span><br><span class="line">    glutInitWindowSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">"MPLine"</span>);</span><br><span class="line">    glutDisplayFunc(display);               <span class="comment">//调用里面函数的绘图函数（当然是你定义）</span></span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, <span class="number">500.0</span>, <span class="number">0.0</span>, <span class="number">500.0</span>);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图形学扫描线算法复习中，拯救图形学计划。。。&lt;br&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
      <category term="图形学" scheme="http://yoursite.com/categories/OpenGL/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="图形学" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>DDA算法</title>
    <link href="http://yoursite.com/2018/10/27/DDA%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/27/DDA算法/</id>
    <published>2018-10-27T14:04:32.000Z</published>
    <updated>2018-11-07T08:36:17.812Z</updated>
    
    <content type="html"><![CDATA[<p>今日连更四篇，也是很肛（沉迷博客无法自拔）。。。<br><a id="more"></a><br>原理：<br>假设直线为：$ y = kx + b $<br>分两种情况讨论<br>1.当$ | k | &lt; = 1 $<br>则设$x<em>{i+1} = x</em>{i} + 1$<br>那么$y<em>{i+1} = y</em>{i} + k$<br>2.当$ | k | &gt; = 1 $<br>则将直线方程转化为$ x = (1/k)y - b/k $<br>则设$y<em>{i+1} = y</em>{i} + 1$<br>那么$x<em>{i+1} = x</em>{i} + 1/k$<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DDA_Line</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span>  <span class="comment">//描绘点在(x1,y1)到(x2,y2)之间的线段</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> k;   <span class="comment">//表示斜率</span></span><br><span class="line">    <span class="keyword">float</span> t;   <span class="comment">//在这之间像素点有多少个</span></span><br><span class="line">    <span class="keyword">float</span> x;   <span class="comment">//起始点x坐标</span></span><br><span class="line">    <span class="keyword">float</span> y;   <span class="comment">//起始点y坐标</span></span><br><span class="line">    <span class="keyword">float</span> dx=x2-x1; <span class="comment">//x方向的增量</span></span><br><span class="line">    <span class="keyword">float</span> dy=y2-y1; <span class="comment">//y方向的增量</span></span><br><span class="line">    <span class="keyword">bool</span> tag=<span class="literal">false</span>; <span class="comment">//表示斜率的绝对值是大于还是小于1,大于1为true,小于1为false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(dx)&gt;=<span class="built_in">abs</span>(dy))</span><br><span class="line">    &#123;</span><br><span class="line">        k=dy/dx;</span><br><span class="line">        t=dx;</span><br><span class="line">        tag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        k=dx/dy;</span><br><span class="line">        t=dy;</span><br><span class="line">        tag=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x1;</span><br><span class="line">    y=y1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t;i++)       <span class="comment">//枚举这之间的像素点</span></span><br><span class="line">    &#123;</span><br><span class="line">        glPointSize(<span class="number">1.0</span>);</span><br><span class="line">        glBegin(GL_POINTS);</span><br><span class="line">        <span class="keyword">if</span>(tag)</span><br><span class="line">        &#123;</span><br><span class="line">            glVertex2f(x,<span class="keyword">int</span>(y+<span class="number">0.5</span>));</span><br><span class="line">            glEnd();</span><br><span class="line">            y=y+k;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            glVertex2f(<span class="keyword">int</span>(x+<span class="number">0.5</span>),y);</span><br><span class="line">            glEnd();</span><br><span class="line">            x=x+k;</span><br><span class="line">            y++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);  <span class="comment">//白色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">//设置背景为白色</span></span><br><span class="line">    glViewport(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    DDA_Line(<span class="number">0</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    DDA_Line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    DDA_Line(<span class="number">250</span>,<span class="number">0</span>,<span class="number">250</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    DDA_Line(<span class="number">0</span>,<span class="number">250</span>,<span class="number">500</span>,<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc,argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE|GLUT_RED);</span><br><span class="line">    glutInitWindowSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">"DDA_Line"</span>);</span><br><span class="line">    glutDisplayFunc(display);               <span class="comment">//调用里面函数的绘图函数（当然是你定义）</span></span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, <span class="number">500.0</span>, <span class="number">0.0</span>, <span class="number">500.0</span>);</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日连更四篇，也是很肛（沉迷博客无法自拔）。。。&lt;br&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
      <category term="图形学" scheme="http://yoursite.com/categories/OpenGL/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="图形学" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Open GL 基本函数二</title>
    <link href="http://yoursite.com/2018/10/27/Open-GL-%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/10/27/Open-GL-基本函数二/</id>
    <published>2018-10-27T13:31:31.000Z</published>
    <updated>2018-11-07T08:38:16.351Z</updated>
    
    <content type="html"><![CDATA[<p>Open GL 基本函数二<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glClearColor</span><span class="params">(GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha)</span></span>;</span><br></pre></td></tr></table></figure><br>参数分别是红，绿，蓝，不透明度，取值范围在[0,1]，仅仅只是执行设定颜色，不执行清除工作，仅仅是为了glClear()函数做准备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)</span><br></pre></td></tr></table></figure><p>参数可为一个或多个，若为多个，用’|’隔开<br>GL_COLOR_BUFFER_BIT<br>当前可写的颜色缓冲<br>GL_DEPTH_BUFFER_BIT<br>深度缓冲<br>GL_ACCUM_BUFFER_BIT<br>累积缓冲<br>GL_STENCIL_BUFFER_BIT<br>模板缓冲</p><p>如果两个函数结合一起用，即<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);  <span class="comment">//白色</span></span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure><br>表示把背景设置成蓝色</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glPointSize</span><span class="params">(GLfloat size)</span></span></span><br></pre></td></tr></table></figure><p>设置绘制时点的大小，大小单位为像素，默认值为1.0，很明显要大于0.0f</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glBegin</span><span class="params">(GLenum mode)</span></span></span><br></pre></td></tr></table></figure><p>mode表示创建元素的类型，有如下几个类型<br>GL_POINTS 单个顶点集<br>GL_LINES 多组双顶点线段<br>GL_POLYGON 单个简单填充凸多边形<br>GL_TRAINGLES 多组独立填充三角形<br>GL_QUADS 多组独立填充四边形<br>GL_LINE_STRIP 不闭合折线<br>GL_LINE_LOOP 闭合折线<br>GL_TRAINGLE_STRIP 线型连续填充三角形串<br>GL_TRAINGLE_FAN 扇形连续填充三角形串<br>GL_QUAD_STRIP 连续填充四边形串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glEnd</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><p>一个几何图形绘制的结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glVertex2f(<span class="keyword">float</span>,<span class="keyword">float</span>)</span><br></pre></td></tr></table></figure><p>设定点的坐标，f表示参数是浮点数<br>类似的还有：<br>glVertex2d<br>glVertex2f<br>glVertex3f<br>glVertex3fv<br>字母表示参数的类型<br>1.s表示16位整数（OpenGL中将这个类型定义为GLshort），<br>2.i表示32位整数（OpenGL中将这个类型定义为GLint和GLsizei），<br>3.f表示32位浮点数（OpenGL中将这个类型定义为GLfloat和GLclampf），<br>4.d表示64位浮点数（OpenGL中将这个类型定义为GLdouble和GLclampd）。<br>5.v表示传递的几个参数将使用指针的方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glViewport(GLint x,GLint y,GLsizei width,GLsizei height)</span><br></pre></td></tr></table></figure><p>x，y 以像素为单位，指定了视口的左下角位置。<br>width，height 表示这个视口矩形的宽度和高度，根据窗口的实时变化重绘窗口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Open GL 基本函数二&lt;br&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Open GL 基本函数一</title>
    <link href="http://yoursite.com/2018/10/27/Open-GL-%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2018/10/27/Open-GL-基本函数一/</id>
    <published>2018-10-27T12:51:38.000Z</published>
    <updated>2018-11-07T08:38:36.547Z</updated>
    
    <content type="html"><![CDATA[<p>Open-GL 基本函数一<br>转战图形学（其实为了应付考试。。。，再不复习就挂科了。。。）<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInit</span><span class="params">(<span class="keyword">int</span>* argc,<span class="keyword">char</span>** argv)</span> </span></span><br></pre></td></tr></table></figure><br>这个函数用来初始化GLUT，此时main函数也有对应的参数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br></pre></td></tr></table></figure><br>glutInit是从main函数获取参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitWindowSize</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span></span><br></pre></td></tr></table></figure><p>该函数用于初始化窗口的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitWindowPosition</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br></pre></td></tr></table></figure><p>该函数用来初始化窗口左上角是什么，以像素为单位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitDisplayMode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> mode)</span></span></span><br></pre></td></tr></table></figure><p>显示模式，可供选择的参数：<br>1.GLUT_RGBA：当未指明GLUT-RGBA或GLUT-INDEX时，是默认使用的模式。表明欲建立RGBA模式的窗口。<br>2.GLUT_RGB：与GLUT-RGBA作用相同。<br>3.GLUT_INDEX：指明为颜色索引模式。<br>4.GLUT_SINGLE：只使用单缓存<br>5.GLUT_DOUBLE：使用双缓存。以避免把计算机作图的过程都表现出来，或者为了平滑地实现动画。<br>6.GLUT_ACCUM：让窗口使用累加的缓存。<br>7.GLUT_ALPHA：让颜色缓冲区使用alpha组件。<br>8.GLUT_DEPTH：使用深度缓存。<br>9.GLUT_STENCIL：使用模板缓存。<br>10.GLUT_MULTISAMPLE：让窗口支持多例程。<br>11.GLUT_STEREO：使窗口支持立体。<br>12.GLUT_LUMINACE:luminance是亮度的意思。但是很遗憾，在多数OpenGL平台上，不被支持。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glColor3f(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span><br></pre></td></tr></table></figure><p>好吧，他有三个浮点参数，但是不清楚是什么（其实是懒得翻他headfile了）<br>其中0.0表示不使用颜色成分，1.0表示使用颜色最大值<br>具体参数对应的颜色如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">glColor3f(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  --&gt; 黑色  </span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  --&gt; 红色  </span><br><span class="line">glColor3f(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  --&gt; 绿色  </span><br><span class="line">glColor3f(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  --&gt; 蓝色  </span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  --&gt; 黄色  </span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  --&gt; 品红色  </span><br><span class="line">glColor3f(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);  --&gt; 青色  </span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);  --&gt; 白色  </span><br></pre></td></tr></table></figure><br>这个函数有个需要注意的是，如果在glBegin()与glEnd()连续调用多个这个函数，只显示最后一个</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Open-GL 基本函数一&lt;br&gt;转战图形学（其实为了应付考试。。。，再不复习就挂科了。。。）&lt;br&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 53 (Rated for Div. 2)</title>
    <link href="http://yoursite.com/2018/10/27/Educational-Codeforces-Round-53-Rated-for-Div-2/"/>
    <id>http://yoursite.com/2018/10/27/Educational-Codeforces-Round-53-Rated-for-Div-2/</id>
    <published>2018-10-27T02:41:24.000Z</published>
    <updated>2018-11-07T08:37:53.518Z</updated>
    
    <content type="html"><![CDATA[<p>传送门：<a href="http://codeforces.com/contest/1073" target="_blank" rel="noopener">http://codeforces.com/contest/1073</a><br>职业fst选手没有被fst，可喜可贺，成功的上了分<br><a id="more"></a><br>A. Diverse Substring<br>水题，直接枚举所有子串判断一下就行，实际上有个更好的做法，直接看相邻的两个字母是不是相同，不相同的话，就取那两个就行了，复杂度O(n)<br><figure class="highlight c"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;i+j<span class="number">-1</span>&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> ss=s.substr(i,j);</span><br><span class="line">            <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;ss.size();k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> id=ss[k]-<span class="string">'a'</span>;</span><br><span class="line">                cnt[id]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> tag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[k]&gt;ss.size()/<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tag)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ss&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B. Vasya and Books<br>没什么难度，按题目模拟就行<br><figure class="highlight c"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(used[b[i]])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,<span class="number">0</span>,i==n?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                used[a[j]]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[j]==b[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf("%d %d\n",b[j],a[i]);</span></span><br><span class="line">            <span class="comment">//printf("j=%d cnt=%d\n",j,cnt);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,cnt,i==n?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C. Vasya and Robot<br>题目意思就是给你长度为n移动序列，让你通过修改给定移动序列，使得你能从(0,0)到(x,y)，并求出所有修改中，最大的位置-最小位置+1的最小值<br>刚开始看这题，感觉是双指针，不算很快速的敲完了双指针，后来发现双指针是个假算法，冷静分析了一下，发现区间具有单调性，而且，我只有固定好修改的区间在哪，直接看当前区间的长度和距离之间的关系，二分check一下就好了，最后三分钟绝杀这题<br><figure class="highlight c"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">200005</span>],dy[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cx=<span class="number">0</span>,cy=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//printf("mid=%d\n",mid);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=i+mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;n)<span class="keyword">break</span>;</span><br><span class="line">        cx=cy=<span class="number">0</span>;</span><br><span class="line">        cx=dx[i<span class="number">-1</span>]+(dx[n]-dx[j]);</span><br><span class="line">        cy=dy[i<span class="number">-1</span>]+(dy[n]-dy[j]);</span><br><span class="line">        <span class="comment">//printf("i=%d  cx=%d cy=%d\n",i,cx,cy);</span></span><br><span class="line">        <span class="keyword">if</span>(mid&lt;<span class="built_in">abs</span>(x-cx)+<span class="built_in">abs</span>(y-cy))<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>((mid-<span class="built_in">abs</span>(x-cx)+<span class="built_in">abs</span>(y-cy))%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dx[i]+=dx[i<span class="number">-1</span>];</span><br><span class="line">        dy[i]+=dy[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="string">'R'</span>)dx[i]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="string">'L'</span>)dx[i]--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="string">'U'</span>)dy[i]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="string">'D'</span>)dy[i]--;</span><br><span class="line">        <span class="comment">//printf("%d %d %d\n",i,dx[i],dy[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">if</span>(dx[n]==x&amp;&amp;dy[n]==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(x)+<span class="built_in">abs</span>(y)&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=min(mid,ans);</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==<span class="number">1e9</span>?<span class="number">-1</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>D. Berland Fair<br>好像是给你一个圆形序列，然后你手中有t元钱，你从1位置开始一直走圆形序列，如果能买当前物品，你就去买，但是你只能买一件，当你最后什么都不能买的时候，就退出，问可以买多少件物品<br>可以证明，假设你买的是序列{1,3,4,7},那么你下次一定也只能买{1，3，4，7}，那么根据贪心思想，我计算一下这个序列能被我买多少次，有点类似除法和取mod的思想<br><figure class="highlight c"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL t;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;n,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL cur=<span class="number">0</span>;</span><br><span class="line">        LL cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur+a[i]&lt;=t)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                cur+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        ans+=cnt*(t/cur);</span><br><span class="line">        t%=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传送门：&lt;a href=&quot;http://codeforces.com/contest/1073&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1073&lt;/a&gt;&lt;br&gt;职业fst选手没有被fst，可喜可贺，成功的上了分&lt;br&gt;
    
    </summary>
    
      <category term="codeforces" scheme="http://yoursite.com/categories/codeforces/"/>
    
    
      <category term="codeforces" scheme="http://yoursite.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 沈阳站总结</title>
    <link href="http://yoursite.com/2018/10/25/ACM-ICPC-%E6%B2%88%E9%98%B3%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/25/ACM-ICPC-沈阳站总结/</id>
    <published>2018-10-24T16:35:15.000Z</published>
    <updated>2018-11-07T08:35:32.594Z</updated>
    
    <content type="html"><![CDATA[<p>一开始就听说了沈阳站是Claris和tls和qls出题，本来去的时候就没报拿牌的希望，没想到热身赛居然打到rk61,这让我又燃起了希望，随即当晚又刷了4题。<br><a id="more"></a><br>正式赛的时候，zcx很快的发现了一道全场签到题，然后把这个签到题丢给我，我一看是字符串，确定好细节，然后开始写，测了几组样例，放心的交上去，1Y。接下来陷入到长期的卡题中，刷新了一下榜，发现K有人过了，于是赶紧看K，好像是个约瑟夫环问题，但是我并不懂是怎么推的，而且数据范围也有点难搞，过了一会，发现很对队伍过了C，随即放弃手中的K，然后肛起来C，一开始看这个C，我总觉得有点DP的感觉，然后Claris也喜欢出DP，于是我开始怂恿队友往DP方向想，差点就成功坑了队友的一发，这时候lsb推出了一个公式，我不放心，让zcx用py打个表先，没想到这个打表还很难写，于是我们决定，就这么肛上去，我手推了几个，也没发现lsb有错，于是交了一发，1Y。这时候旁边两支金牌队伍都秒了G，看了一眼G，感觉有点像数据结构，但是结合了做这么多数据结构的经验，我觉得这题一定不是数据结构，一开始我提出了离线乱搞的想法，然后仔细阅读题目，好像是强制在线，GG，但是lsb说强制在线反而没有离线那么麻烦，我想了也是，于是开始想在线的做法，这时对友突然提了一下勾股数，我发现确实是整点坐标不共线，必然K是勾股数的平方，我提出了是不是这个范围勾股数不多，直接枚举所有的勾股数就行，于是我上去打了个表，发现勾股数很多，至少占1/2,这时候又陷入僵局，仔细思考了一下，我和lsb发现好像当K是完全平方数的时候，才能共线分解，当K是勾股数的平方的时候，可能会有多个分解，但这个分解量级在10这样，对查询和更新的贡献不大，于是lsb提出预处理所有的勾股数分解，然后查询和更新判断是不是勾股数，分类讨论暴力一下就好了，我觉得这个算法很正确，于是让lsb写了，结果没想到这题码量意外大，没想到因为我的决策失误，错失了一块银牌，这题最后都没找出来哪里WA了，当时这题确实我应该我写的，我意识到这个问题的时候已经是还剩45分钟的时候，这个数据结构没过的锅我背吧，这次比赛我还没尽到代码手责任，特别是这种数据结构题，应该还是我上机搞一搞的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始就听说了沈阳站是Claris和tls和qls出题，本来去的时候就没报拿牌的希望，没想到热身赛居然打到rk61,这让我又燃起了希望，随即当晚又刷了4题。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>hello,usename6</title>
    <link href="http://yoursite.com/2018/10/24/hello-usename6/"/>
    <id>http://yoursite.com/2018/10/24/hello-usename6/</id>
    <published>2018-10-24T11:29:03.000Z</published>
    <updated>2018-10-24T16:30:14.262Z</updated>
    
    <content type="html"><![CDATA[<p>hello usename6!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello usename6!&lt;/p&gt;

      
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
